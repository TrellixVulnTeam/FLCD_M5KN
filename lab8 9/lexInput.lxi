%{
#include <math.h>
#include <stdio.h>
#include "y.tab.h"
int lines = 0;
%}
%option noyywrap

DIGIT 		[0-9]
NUMBER		[1-9][0-9]*|0
STRING		["]([a-zA-Z])*["]
CONSTANT    {STRING}|{NUMBER}
ID 		    [a-zA-Z][a-zA-Z0-9]{0,10}

%%

"int"       {printf( "Reserved word: %s\n", yytext );  return INT;}
"bool"	    {printf( "Reserved word: %s\n", yytext );  return BOOL;}
"string"	{printf( "Reserved word: %s\n", yytext );  return STRING;}
"character"	{printf( "Reserved word: %s\n", yytext );  return CHARACTER;}
"if"	    {printf( "Reserved word: %s\n", yytext );  return IF;}
"while"	    {printf( "Reserved word: %s\n", yytext );  return WHILE;}
"else"	    {printf( "Reserved word: %s\n", yytext );  return ELSE;}
"function"	{printf( "Reserved word: %s\n", yytext );  return FUNCTION;}
"read"	    {printf( "Reserved word: %s\n", yytext );  return READ;}
"write"	    {printf( "Reserved word: %s\n", yytext );  return WRITE;}
"true"	    {printf( "Reserved word: %s\n", yytext );  return TRUE;}
"false"	    {printf( "Reserved word: %s\n", yytext );  return FALSE;}
"for"	    {printf( "Reserved word: %s\n", yytext );  return FOR;}
"length"	{printf( "Reserved word: %s\n", yytext );  return LENGTH;}
"&&"        {printf( "Operator: %s\n", yytext ); return AND_OPERATOR;}
"||"        {printf( "Operator: %s\n", yytext ); return OR_OPERATOR;}

{ID}	    {printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}
{CONSTANT}	{printf( "Constant: %s\n", yytext ); return CONSTANT;}

":"	   {printf( "Separator: %s\n", yytext ); return COLON;}
";"	   {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	   {printf( "Separator: %s\n", yytext ); return COMA;}
"."	   {printf( "Separator: %s\n", yytext ); return DOT;}
"+"	   {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	   {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	   {printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"/"	   {printf( "Operator: %s\n", yytext ); return DIVISION;}
"//"   {printf( "Operator: %s\n", yytext ); return FLOOR_DIVISION;}
"%"    {printf( "Operator: %s\n", yytext ); return MODULO;}
"("	   {printf( "Separator: %s\n", yytext ); return LEFT_ROUND_BRACKETS;}
")"	   {printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_BRACKETS;}
"["	   {printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_BRACKETS;}
"]"	   {printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_BRACKETS;}
"{"    {printf( "Separator: %s\n", yytext ); return LEFT_CURLY_BRACKETS;}
"}"    {printf( "Separator: %s\n", yytext ); return RIGHT_CURLY_BRACKETS;}
"?"    {printf( "Separator: %s\n", yytext ); return QUESTION_MARK;}
"<"	   {printf( "Operator: %s\n", yytext ); return LESS_THAN;}
">"	   {printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
"<="   {printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN;}
">="   {printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN;}
"!="   {printf( "Operator: %s\n", yytext ); return DIFFERENT;}
"=="   {printf( "Operator: %s\n", yytext ); return EQUAL;}
"="	   {printf( "Operator: %s\n", yytext ); return ASSIGNMENT;}

[ \t]+	/* remove spaces */  	{}

[\n]+	{++lines;}

[a-zA-Z][a-zA-Z0-9]{11,}	{printf("Illegal size of the identifier at line %d\n", lines); return -1;}

[0-9][a-zA-Z0-9]{0,10}	{printf("Illegal identifier at line %d\n", lines); return -1;}

.	{printf("Illegal symbol at line\n"); return -1;}
%%
