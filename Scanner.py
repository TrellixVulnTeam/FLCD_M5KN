from ST import HashTable
from lab4.Token import *
from PIF import PIF
import re

class Scanner:
    def __init__(self, file):
        self.SymbolTable = HashTable()
        self.filename = file
        self._tokens = getTokens()
        self.PIF = PIF()

    '''
    Checks if a token is Constant:
    token: the specific token to be checked
    output: true if token is constant, false otherwise
    '''
    @staticmethod
    def isConstant(token):
        return re.match('^([a-zA-Z_])([a-zA-Z0-9_])+', token) is not None

    '''
        Checks if a token is Integer:
        token: the specific token to be checked
        output: true if token is integer, false otherwise
    '''
    @staticmethod
    def isInt(token):
        return re.match('^(?:0|[1-9][0-9]*)$', token) is not None

    '''
        Checks if a token is Character:
        token: the specific token to be checked
        output: true if token is character, false otherwise
    '''
    @staticmethod
    def isChar(token):
        return re.match('^"[^"\n]*"$', token) is not None

    '''
        Checks if a token is Operator:
        token: the specific token to be checked
        output: true if token is operator, false otherwise
    '''
    @staticmethod
    def isOperator(token):
        return token in operators

    '''
        Checks if a token is Operator:
        token: the specific token to be checked
        output: true if token is operator, false otherwise
    '''
    @staticmethod
    def isIdentifier(token):
        return re.match('^[a-zA-Z_]([a-zA-Z0-9]){,255}$', token) is not None

    """
        This method transforms the line from the file to a list of tokens
        line: the line in the file
        output: list of tokens, generated by the line.
    """
    @staticmethod
    def getTokensFromLine(line):
        tokens = []
        split = []
        if " " in line:
            split = line.split()
        else:
            split.append(line)
        index = 0
        while index < len(split):

            if 'print("' in split[index]:
                s = ""
                split[index] = split[index].replace('print(', '')
                for i in split:
                    s += i + " "
                s = s[:-1]
                s = s[:-1]
                tokens.append(s)
                index = len(split)
            else:
                ok = 0
                if ";" in split[index]:
                    split[index] = split[index][:-1]
                if "(" in split[index]:
                    ok = 1
                    t = split[index].split("(", 1)
                    tokens.append(t[0])
                    tokens.append("(")
                    split[index] = t[1]
                    if ")" in split[index]:
                        split[index] = split[index][:-1]
                        tokens.append(split[index])
                        tokens.append(")")
                    else:
                        if "[" in split[index]:
                            ok = 1
                            t = split[index].split("[", 1)
                            tokens.append(t[0])
                            tokens.append("[")
                            split[index] = t[1]
                            if "]" in split[index]:
                                split[index] = split[index][:-1]
                                tokens.append(split[index])
                                tokens.append("]")
                        else:
                            tokens.append(split[index])
                if ")" in split[index]:
                    ok = 1
                    split[index] = split[index][:-1]
                    tokens.append(split[index])
                    tokens.append(")")
                if "[" in split[index]:
                    ok = 1
                    t = split[index].split("[", 1)
                    tokens.append(t[0])
                    tokens.append("[")
                    split[index] = t[1]
                    if "]" in split[index]:
                        split[index] = split[index][:-1]
                        tokens.append(split[index])
                        tokens.append("]")
                if '"' in split[index]:

                    tokens.append(split[index])
                if ok == 0:
                    tokens.append(split[index])
            index += 1
        return tokens

    """
        This method defines how the scanner is executing.
        if there is a error, it will say on what line and on what token.
    """
    def run(self):
        with open(self.filename, "r") as file:
            lineNumber = 1
            for line in file:
                tokens = Scanner.getTokensFromLine(line.rstrip())
                print(tokens)
                for token in tokens:
                    if token in separators or token in operators or token in reservedWords:
                        self.PIF.add(self._tokens[token], 1)

                    elif Scanner.isIdentifier(token):
                        self.SymbolTable.insert(token)
                        id = self.SymbolTable.hash(token)
                        self.PIF.add(self._tokens['identifier'], id)

                    elif Scanner.isConstant(token):
                        self.SymbolTable.insert(token)
                        id = self.SymbolTable.hash(token)
                        self.PIF.add(self._tokens['constant'], id)

                    elif Scanner.isInt(token):
                        self.SymbolTable.insert(token)
                        id = self.SymbolTable.hash(token)
                        self.PIF.add(self._tokens['constant'], id)

                    elif Scanner.isChar(token):
                        self.SymbolTable.insert(token)
                        id = self.SymbolTable.hash(token)
                        self.PIF.add(self._tokens['constant'], id)

                    else:
                        raise Exception("Invalid token " + token + " at the line" + str(lineNumber))

                lineNumber += 1

            print(self.PIF)
            print(self.SymbolTable)
